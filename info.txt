//producers

#include <stdio.h>
#include <string.h>
#include <librdkafka/rdkafka.h>

void dr_msg_cb(rd_kafka_t *rk,
               const rd_kafka_message_t *rkmessage, void *opaque) {
    if (rkmessage->err) {
        fprintf(stderr, "%% Message delivery failed: %s\n",
                rd_kafka_err2str(rkmessage->err));
    } else {
        fprintf(stdout, "%% Message delivered (%zd bytes, "
                        "partition %" PRId32 ")\n",
                rkmessage->len, rkmessage->partition);
    }
}

int main() {
    rd_kafka_t *rk;          // Producer instance handle
    rd_kafka_conf_t *conf;   // Temporary configuration object
    char errstr[512];        // librdkafka API error reporting buffer
    const char *brokers;     // Argument: broker list
    const char *topic;       // Argument: topic to produce to

    brokers = "localhost:9092";
    topic = "tester";

    // Create Kafka client configuration place-holder
    conf = rd_kafka_conf_new();

    // Set bootstrap broker(s) as a comma-separated list of host or host:port
    if (rd_kafka_conf_set(conf, "bootstrap.servers", brokers, errstr,
                          sizeof(errstr)) != RD_KAFKA_CONF_OK) {
        fprintf(stderr, "%s\n", errstr);
        return 1;
    }

    // Set the delivery report callback
    rd_kafka_conf_set_dr_msg_cb(conf, dr_msg_cb);

    // Create producer instance
    rk = rd_kafka_new(RD_KAFKA_PRODUCER, conf, errstr, sizeof(errstr));
    if (!rk) {
        fprintf(stderr, "%% Failed to create new producer: %s\n", errstr);
        return 1;
    }

    // Produce message
    const char *message = "Hello, Kafka!";
    rd_kafka_resp_err_t err;
    while(1){
    err = rd_kafka_producev(
        rk,
        RD_KAFKA_V_TOPIC(topic),
        RD_KAFKA_V_VALUE((void *)message, strlen(message)),
        RD_KAFKA_V_END);

    if (err) {
        fprintf(stderr, "%% Failed to produce to topic %s: %s\n",
                topic, rd_kafka_err2str(err));
    } else {
        fprintf(stdout, "%% Produced message (%zu bytes)\n", strlen(message));
    }
    //just waiting for key button to press is what below means
    getchar();
    }
    

    // Wait for message to be delivered
    rd_kafka_flush(rk, 10 * 1000 /* wait for max 10 seconds */);

    // Destroy the producer instance
    rd_kafka_destroy(rk);

    return 0;
}


------------------------------------------------

 conf = rd_kafka_conf_new();
 if (rd_kafka_conf_set(conf, "bootstrap.servers", brokers, errstr,
                          sizeof(errstr)) != RD_KAFKA_CONF_OK) {
        fprintf(stderr, "%s\n", errstr);
        return 1;
    }

rd_kafka_conf_set_dr_msg_cb(conf, dr_msg_cb);

// Create producer instance
    rk = rd_kafka_new(RD_KAFKA_PRODUCER, conf, errstr, sizeof(errstr));

    rd_kafka_producev(
        rk,
        RD_KAFKA_V_TOPIC(topic),
        RD_KAFKA_V_VALUE((void *)message, strlen(message)),
        RD_KAFKA_V_END);


-----------------------------------------------------

//consumer

#include <stdio.h>
#include <signal.h>
#include <string.h>
#include <stdlib.h>
#include <librdkafka/rdkafka.h>

static volatile sig_atomic_t run = 1;

static void stop(int sig) {
    run = 0;
}

int main() {
    const char *brokers = "localhost:9092";
    const char *group_id = "group1";
    const char *topic = "tester";

    rd_kafka_t *rk;        // Consumer instance handle
    rd_kafka_conf_t *conf; // Temporary configuration object
    rd_kafka_resp_err_t err;
    char errstr[512];

    // Signal handler for clean shutdown
    signal(SIGINT, stop);

    // Create Kafka client configuration place-holder
    conf = rd_kafka_conf_new();

    // Set bootstrap broker(s)
    if (rd_kafka_conf_set(conf, "bootstrap.servers", brokers, errstr,
                          sizeof(errstr)) != RD_KAFKA_CONF_OK) {
        fprintf(stderr, "%s\n", errstr);
        return 1;
    }

    // Set the consumer group id
    if (rd_kafka_conf_set(conf, "group.id", group_id, errstr,
                          sizeof(errstr)) != RD_KAFKA_CONF_OK) {
        fprintf(stderr, "%s\n", errstr);
        return 1;
    }

    // Create consumer instance
    rk = rd_kafka_new(RD_KAFKA_CONSUMER, conf, errstr, sizeof(errstr));
    if (!rk) {
        fprintf(stderr, "%% Failed to create new consumer: %s\n", errstr);
        return 1;
    }

    // Subscribe to topic
    rd_kafka_topic_partition_list_t *topics;
    topics = rd_kafka_topic_partition_list_new(1);
    rd_kafka_topic_partition_list_add(topics, topic, RD_KAFKA_PARTITION_UA);

    err = rd_kafka_subscribe(rk, topics);
    if (err) {
        fprintf(stderr, "%% Failed to subscribe to %s: %s\n",
                topic, rd_kafka_err2str(err));
        return 1;
    }

    while (run) {
        rd_kafka_message_t *rkmessage;

        // Poll for messages
        rkmessage = rd_kafka_consumer_poll(rk, 1000);
        if (rkmessage) {
            if (rkmessage->err) {
                if (rkmessage->err == RD_KAFKA_RESP_ERR__PARTITION_EOF) {
                    fprintf(stderr, "%% Reached end of topic %s [%" PRId32 "] "
                                    "at offset %" PRId64 "\n",
                            rd_kafka_topic_name(rkmessage->rkt),
                            rkmessage->partition,
                            rkmessage->offset);
                } else if (rkmessage->err == RD_KAFKA_RESP_ERR__TIMED_OUT) {
                    // Ignore
                } else {
                    fprintf(stderr, "%% Consume error for topic %s [%" PRId32
                                    "] offset %" PRId64 ": %s\n",
                            rd_kafka_topic_name(rkmessage->rkt),
                            rkmessage->partition,
                            rkmessage->offset,
                            rd_kafka_message_errstr(rkmessage));
                }
            } else {
                printf("%% Message (topic %s, partition %" PRId32 ", offset %" PRId64
                       ", %zd bytes):\n",
                       rd_kafka_topic_name(rkmessage->rkt),
                       rkmessage->partition,
                       rkmessage->offset,
                       rkmessage->len);
                printf("%.*s\n",
                       (int)rkmessage->len, (const char *)rkmessage->payload);
            }

            rd_kafka_message_destroy(rkmessage);
        }
    }

    rd_kafka_consumer_close(rk);
    rd_kafka_topic_partition_list_destroy(topics);
    rd_kafka_destroy(rk);

    return 0;
}






No Centralized Instance: Unlike some MQTT libraries or brokers where a single loop or connection instance might handle all messages, 
Kafka consumers are usually instantiated per thread or per consumer instance. 
Each instance handles its own polling and message processing independently.